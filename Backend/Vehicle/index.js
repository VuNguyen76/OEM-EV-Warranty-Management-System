// Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env ·ªü th∆∞ m·ª•c Backend (root) - ch·ªâ khi kh√¥ng ch·∫°y trong Docker
if (process.env.NODE_ENV !== 'production') {
    require('dotenv').config({ path: require('path').join(__dirname, '../.env') });
}

const express = require("express");
const VehicleService = require("./Service/VehicleService");
const { setupCommonMiddleware } = require("../shared/middleware/common");
const { connectToVehicleDatabase } = require("../shared/database/vehicleConnection");
const redisService = require("../shared/services/RedisService");

const app = express();
const port = process.env.VEHICLE_SERVICE_PORT || 3002;

// C·∫•u h√¨nh middleware
setupCommonMiddleware(app);
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Routes
app.use("/vehicles", VehicleService);

// Health check endpoint
app.get('/health', (req, res) => {
    res.json({
        success: true,
        message: 'Vehicle service ƒëang ho·∫°t ƒë·ªông',
        timestamp: new Date().toISOString(),
        services: {
            database: 'connected',
            redis: redisService.isConnected ? 'connected' : 'disconnected'
        }
    });
});

// API documentation endpoint
app.get('/api-docs', (req, res) => {
    res.json({
        success: true,
        message: 'Vehicle Service API Documentation',
        endpoints: {
            vehicles: {
                'POST /vehicles/register': 'ƒêƒÉng k√Ω xe m·ªõi theo VIN',
                'GET /vehicles/vin/:vin': 'L·∫•y th√¥ng tin xe theo VIN',
                'GET /vehicles/service-center/:centerName': 'L·∫•y danh s√°ch xe theo trung t√¢m d·ªãch v·ª•',
                'GET /vehicles/search': 'T√¨m ki·∫øm xe',
                'PUT /vehicles/:id': 'C·∫≠p nh·∫≠t th√¥ng tin xe'
            },
            parts: {
                'POST /vehicles/:vehicleId/parts': 'G·∫Øn ph·ª• t√πng v√†o xe',
                'GET /vehicles/:vehicleId/parts': 'L·∫•y danh s√°ch ph·ª• t√πng c·ªßa xe',
                'PUT /vehicles/:vehicleId/parts/:partId': 'C·∫≠p nh·∫≠t tr·∫°ng th√°i ph·ª• t√πng',
                'GET /vehicles/search/:serialNumber': 'T√¨m ki·∫øm ph·ª• t√πng theo s·ªë seri',
                'GET /vehicles/stats/overview': 'Th·ªëng k√™ ph·ª• t√πng'
            },
            serviceHistory: {
                'POST /vehicles/:vehicleId/service-history': 'Th√™m l·ªãch s·ª≠ d·ªãch v·ª•',
                'GET /vehicles/:vehicleId/service-history': 'L·∫•y l·ªãch s·ª≠ d·ªãch v·ª• c·ªßa xe',
                'PUT /vehicles/:vehicleId/service-history/:recordId': 'C·∫≠p nh·∫≠t l·ªãch s·ª≠ d·ªãch v·ª•',
                'GET /vehicles/service-center/:centerName/history': 'L·∫•y l·ªãch s·ª≠ d·ªãch v·ª• theo trung t√¢m'
            }
        },
        authentication: {
            required: true,
            method: 'Bearer Token',
            roles: ['admin', 'service_staff', 'technician']
        }
    });
});

// Error handling middleware
app.use((err, req, res, next) => {
    console.error('Vehicle Service Error:', err);

    if (err.name === 'ValidationError') {
        return res.status(400).json({
            success: false,
            message: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
            errors: Object.values(err.errors).map(e => e.message)
        });
    }

    if (err.name === 'CastError') {
        return res.status(400).json({
            success: false,
            message: 'ID kh√¥ng h·ª£p l·ªá'
        });
    }

    if (err.code === 11000) {
        return res.status(400).json({
            success: false,
            message: 'D·ªØ li·ªáu ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng'
        });
    }

    res.status(500).json({
        success: false,
        message: 'L·ªói server n·ªôi b·ªô',
        error: process.env.NODE_ENV === 'development' ? err.message : undefined
    });
});

// 404 handler
app.use((req, res) => {
    res.status(404).json({
        success: false,
        message: 'Endpoint kh√¥ng t·ªìn t·∫°i',
        availableEndpoints: '/api-docs'
    });
});

// H√†m kh·ªüi ƒë·ªông server
const startServer = async () => {
    try {
        // K·∫øt n·ªëi database tr∆∞·ªõc
        await connectToVehicleDatabase();

        // K·∫øt n·ªëi Redis
        await redisService.connect();

        // Sau ƒë√≥ kh·ªüi ƒë·ªông server
        app.listen(port, () => {
            console.log('üöó VEHICLE SERVICE RUNNING');
            console.log(`URL: http://localhost:${port}`);
            console.log(`Environment: ${process.env.NODE_ENV || 'development'}`);
            console.log(`API Docs: http://localhost:${port}/api-docs`);
            console.log(`Started at: ${new Date().toLocaleTimeString()} ${new Date().toLocaleDateString()}\n`);
        });
    } catch (error) {
        console.error('‚ùå Failed to start Vehicle Service:', error.message);
        process.exit(1);
    }
};

startServer();

module.exports = app;
