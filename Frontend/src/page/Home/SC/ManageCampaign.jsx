import React, { useState } from "react";
import Title from "../../../components/Title";
import { useDispatch, useSelector } from "react-redux";
import { closeModal, openModal } from "../../../features/ui/uiSlice";
import Backdrop from "../../../components/Backdrop";
import Modal from "../../../components/Modal";
import { set } from "date-fns";

const fakeCampaigns = [
  {
    id: "RC-VF9-2024-001",
    title: "VF 9 - C·∫≠p nh·∫≠t ph·∫ßn m·ªÅm h·ªá th·ªëng phanh",
    level: "Cao",
    status: "ƒêang ho·∫°t ƒë·ªông",
    description:
      "C·∫≠p nh·∫≠t ph·∫ßn m·ªÅm ECU phanh ƒë·ªÉ kh·∫Øc ph·ª•c v·∫•n ƒë·ªÅ c·∫£nh b√°o sai.",
    affectedCars: 3,
    duration: "1.5h",
    completionRate: 33,
    type: "Tri·ªáu h·ªìi",
    model: "VF9",
    affectedVehicles: [
      {
        vin: "5YJ3E1EA4KF654321",
        customerName: "Tr·∫ßn Th·ªã B√¨nh",
        phone: "0912345678",
        status: "Ch·ªù x·ª≠ l√Ω",
        appointmentDate: "2024-02-10",
        technician: null,
      },
      {
        vin: "5YJ3E1EA4KF988888",
        customerName: "Nguy·ªÖn VƒÉn An",
        phone: "0987654321",
        status: "ƒêang th·ª±c hi·ªán",
        appointmentDate: "2024-02-12",
        technician: "V≈© Th√†nh Nam",
      },
      {
        vin: "5YJ3E1EA4KF123456",
        customerName: "Ph·∫°m Qu·ªëc T√≠nh",
        phone: "0977888999",
        status: "Ho√†n th√†nh",
        appointmentDate: "2024-02-05",
        technician: "Nguy·ªÖn M·∫°nh D≈©ng",
      },
    ],
  },
  {
    id: "SV-VF8-2024-002",
    title: "VF 8 - B·∫£o d∆∞·ª°ng ƒë·ªãnh k·ª≥ 10.000km",
    level: "Trung b√¨nh",
    status: "ƒêang ho·∫°t ƒë·ªông",
    description:
      "Th·ª±c hi·ªán ki·ªÉm tra h·ªá th·ªëng ƒëi·ªÅu h√≤a v√† thay d·∫ßu phanh ƒë·ªãnh k·ª≥.",
    affectedCars: 2,
    duration: "2h",
    completionRate: 50,
    type: "B·∫£o d∆∞·ª°ng",
    model: "VF8",
    affectedVehicles: [
      {
        vin: "5YJ3E1EA4KF777777",
        customerName: "Ph·∫°m Qu·ªëc T√≠nh",
        phone: "0977888999",
        status: "Ho√†n th√†nh",
        appointmentDate: "2024-03-02",
        technician: "Tr·∫ßn VƒÉn T√†i",
      },
      {
        vin: "5YJ3E1EA4KF111111",
        customerName: "L√™ Minh C∆∞·ªùng",
        phone: "0965432109",
        status: "Ch·ªù l·ªãch h·∫πn",
        appointmentDate: null,
        technician: null,
      },
    ],
  },
  {
    id: "RC-VF7-2024-003",
    title: "VF 7 - Thay th·∫ø b·ªô d√¢y c·∫£m bi·∫øn t√∫i kh√≠",
    level: "Cao",
    status: "Ho√†n th√†nh",
    description: "Thay m·ªõi d√¢y c·∫£m bi·∫øn t√∫i kh√≠ ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n v·∫≠n h√†nh.",
    affectedCars: 2,
    duration: "1h",
    completionRate: 100,
    type: "Tri·ªáu h·ªìi",
    model: "VF7",
    affectedVehicles: [
      {
        vin: "5YJ3E1EA4KF222222",
        customerName: "Nguy·ªÖn VƒÉn B√¨nh",
        phone: "0909999999",
        status: "Ho√†n th√†nh",
        appointmentDate: "2024-01-15",
        technician: "Phan Qu·ªëc Long",
      },
      {
        vin: "5YJ3E1EA4KF333333",
        customerName: "ƒê·ªó Th·ªã H·∫°nh",
        phone: "0933333333",
        status: "Ho√†n th√†nh",
        appointmentDate: "2024-01-16",
        technician: "V≈© Th√†nh Nam",
      },
    ],
  },
];
const fakeAppointments = [
  {
    campaignId: "RC-VF9-2024-001",
    vin: "5YJ3E1EA4KF654321",
    customer: "Tr·∫ßn Th·ªã B√¨nh",
    date: "20/02/2024 10:00",
    status: "ƒê√£ l√™n l·ªãch",
    technician: "",
  },
  {
    campaignId: "SC-VF8-2024-002",
    vin: "5YJ3E1EA4KF123456",
    customer: "Nguy·ªÖn VƒÉn An",
    date: "21/02/2024 14:00",
    status: "ƒê√£ x√°c nh·∫≠n",
    technician: "V≈© Th√†nh Nam",
  },
  {
    campaignId: "RC-BYD-2024-001",
    vin: "1GYY22G9651138789",
    customer: "L√™ Minh C∆∞·ªùng",
    date: "19/02/2024 09:00",
    status: "Ho√†n th√†nh",
    technician: "V≈© Th√†nh Nam",
  },
];

const technicians = [
  "Ph·∫°m VƒÉn ƒê·ª©c",
  "Ho√†ng Minh T√πng",
  "V≈© Th√†nh Nam",
  "Nguy·ªÖn M·∫°nh D≈©ng",
];

const ManageCampaign = () => {
  const affectedVehicles = fakeCampaigns.affectedVehicles || [];

  const [form, setForm] = useState({
    vins: [],
    date: "",
    note: "",
  });
  const [isCampaign, setIsCampaign] = useState(true);

  const dispatch = useDispatch();
  const { isOpen, modalType, modalData } = useSelector(
    (state) => state.ui.modal
  );

  const totalCampaigns = fakeCampaigns.length;
  const totalCars = fakeCampaigns.reduce((sum, c) => sum + c.affectedCars, 0);
  const totalAppointments = 3;
  const totalCompletion = Math.round(
    fakeCampaigns.reduce((s, c) => s + c.completionRate, 0) / totalCampaigns
  );

  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (form.vins.length === 0 || !form.date) {
      alert("Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 xe v√† ng√†y h·∫πn!");
      return;
    }

    console.log("üìÖ L·ªãch h·∫πn m·ªõi:", form);
    alert(`ƒê√£ t·∫°o l·ªãch h·∫πn cho ${form.vins.length} xe.`);
    dispatch(closeModal());
    setForm({ vins: [], date: "", note: "" });
  };

  const statusColors = {
    "ƒêang ho·∫°t ƒë·ªông": "bg-green-100 text-green-700",
    "Ho√†n th√†nh": "bg-gray-100 text-gray-700",
  };

  const levelColors = {
    Cao: "bg-red-100 text-red-700",
    "Trung b√¨nh": "bg-yellow-100 text-yellow-700",
    Th·∫•p: "bg-blue-100 text-blue-700",
  };

  return (
    <div className="h-full w-full space-y-6 p-4">
      {/* Header */}
      <div className="flex justify-between items-center mb-3">
        <Title
          title="Chi·∫øn d·ªãch Recall & Service"
          subTitle="Qu·∫£n l√Ω chi·∫øn d·ªãch tri·ªáu h·ªìi v√† b·∫£o d∆∞·ª°ng t·ª´ h√£ng"
        />
      </div>

      {/* --- Th·ªëng k√™ --- */}
      <div className="grid grid-cols-4 gap-4">
        <div className="border border-gray-300 rounded-lg p-4 text-center bg-white">
          <p className="text-gray-500 text-sm">T·ªïng chi·∫øn d·ªãch</p>
          <h2 className="text-2xl font-bold">{totalCampaigns}</h2>
          <p className="text-gray-400 text-xs mt-1">{`${totalCampaigns} ƒëang ho·∫°t ƒë·ªông`}</p>
        </div>

        <div className="border border-gray-300 rounded-lg p-4 text-center bg-white">
          <p className="text-gray-500 text-sm">Xe c·∫ßn x·ª≠ l√Ω</p>
          <h2 className="text-2xl font-bold">{totalCars}</h2>
          <p className="text-gray-400 text-xs mt-1">Tr√™n t·∫•t c·∫£ chi·∫øn d·ªãch</p>
        </div>

        <div className="border border-gray-300 rounded-lg p-4 text-center bg-white">
          <p className="text-gray-500 text-sm">L·ªãch h·∫πn</p>
          <h2 className="text-2xl font-bold">{totalAppointments}</h2>
          <p className="text-gray-400 text-xs mt-1">{`${1} ƒë√£ ho√†n th√†nh`}</p>
        </div>

        <div className="border border-gray-300 rounded-lg p-4 text-center bg-white">
          <p className="text-gray-500 text-sm">T·ª∑ l·ªá ho√†n th√†nh</p>
          <h2 className="text-2xl font-bold">{totalCompletion}%</h2>
          <p className="text-gray-400 text-xs mt-1">T·ªïng th·ªÉ</p>
        </div>
      </div>

      {/* --- Tabs --- */}
      <div className="flex gap-2 mt-2">
        <button
          onClick={() => setIsCampaign(true)}
          className={`px-4 py-2 rounded-lg text-gray-500 font-semibold cursor-pointer ${
            isCampaign
              ? "bg-green-500 hover:bg-green-600 text-white"
              : "bg-gray-200 hover:bg-gray-300"
          }`}
        >
          Chi·∫øn d·ªãch
        </button>
        <button
          onClick={() => setIsCampaign(false)}
          className={`px-4 py-2 rounded-lg text-gray-500 font-semibold cursor-pointer ${
            isCampaign
              ? "bg-gray-200 hover:bg-gray-300"
              : "bg-green-500 hover:bg-green-600 text-white"
          }`}
        >
          L·ªãch h·∫πn
        </button>
      </div>

      {isCampaign ? (
        // ======= Danh s√°ch chi·∫øn d·ªãch =======
        <div className="space-y-4">
          {fakeCampaigns.map((c) => (
            <div
              key={c.id}
              className="border border-gray-300 rounded-lg p-4 bg-white shadow-sm"
            >
              {/* Header */}
              <div className="flex justify-between items-start">
                <div>
                  <h3 className="font-semibold text-lg text-gray-900">
                    {c.title}
                  </h3>
                  <p className="text-gray-500 text-sm">{c.id}</p>
                </div>
                <div className="flex items-center gap-2">
                  <span
                    className={`px-3 py-1 rounded-full text-xs font-semibold ${
                      levelColors[c.level]
                    }`}
                  >
                    {c.level}
                  </span>
                  <span
                    className={`px-3 py-1 rounded-full text-xs font-semibold ${
                      statusColors[c.status]
                    }`}
                  >
                    {c.status}
                  </span>
                </div>
              </div>

              <p className="mt-2 text-gray-700">{c.description}</p>

              <div className="grid grid-cols-4 gap-4 text-sm mt-3 text-gray-700">
                <p>
                  <b>Lo·∫°i chi·∫øn d·ªãch:</b> {c.type}
                </p>
                <p>
                  <b>Xe ·∫£nh h∆∞·ªüng:</b> {c.affectedCars} xe
                </p>
                <p>
                  <b>Th·ªùi gian d·ª± ki·∫øn:</b> {c.duration}
                </p>
                <p>
                  <b>T·ª∑ l·ªá ho√†n th√†nh:</b> {c.completionRate}%
                </p>
              </div>

              <div className="mt-3 flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <span className="text-gray-500 text-sm">
                    M·∫´u xe ·∫£nh h∆∞·ªüng:
                  </span>
                  <span className="px-2 py-1 bg-gray-100 text-gray-700 rounded-lg text-sm font-medium">
                    {c.model}
                  </span>
                </div>
                <div className="flex items-center gap-3">
                  <button
                    onClick={() =>
                      dispatch(
                        openModal({
                          modalType: "createAppointment",
                          modalData: c,
                        })
                      )
                    }
                    className="px-4 py-2 bg-green-600 text-white rounded-lg text-sm hover:bg-green-700 flex items-center gap-2 cursor-pointer"
                  >
                    T·∫°o l·ªãch h·∫πn
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      ) : (
        // ======= Danh s√°ch l·ªãch h·∫πn =======
        <div className="border border-gray-300 p-4 rounded-lg bg-white">
          <h3 className="font-semibold text-lg text-gray-800 mb-3">
            Danh s√°ch l·ªãch h·∫πn
          </h3>
          <p className="text-gray-500 text-sm mb-3">
            Qu·∫£n l√Ω v√† theo d√µi l·ªãch h·∫πn c·ªßa kh√°ch h√†ng
          </p>

          <table className="w-full text-sm border-collapse">
            <thead>
              <tr className="bg-gray-100 text-left text-gray-700">
                <th className="py-2 px-3">Chi·∫øn d·ªãch</th>
                <th className="py-2 px-3">VIN</th>
                <th className="py-2 px-3">Kh√°ch h√†ng</th>
                <th className="py-2 px-3">Ng√†y h·∫πn</th>
                <th className="py-2 px-3">Tr·∫°ng th√°i</th>
                <th className="py-2 px-3">K·ªπ thu·∫≠t vi√™n</th>
                <th className="py-2 px-3 text-center">H√†nh ƒë·ªông</th>
              </tr>
            </thead>

            <tbody>
              {fakeAppointments.map((a, i) => (
                <tr
                  key={i}
                  className="border-t border-gray-200 hover:bg-gray-50 transition"
                >
                  <td className="py-3 px-3">{a.campaignId}</td>
                  <td className="py-3 px-3">{a.vin}</td>
                  <td className="py-3 px-3">{a.customer}</td>
                  <td className="py-3 px-3">{a.date}</td>
                  <td className="py-3 px-3">
                    <span
                      className={`px-2 py-1 rounded-full text-xs font-semibold ${
                        a.status === "ƒê√£ x√°c nh·∫≠n"
                          ? "bg-green-100 text-green-700"
                          : a.status === "ƒê√£ b√°o c√°o"
                          ? "bg-blue-100 text-blue-700"
                          : a.status === "Ch·ªù x·ª≠ l√Ω"
                          ? "bg-yellow-100 text-yellow-700"
                          : "bg-gray-100 text-gray-700"
                      }`}
                    >
                      {a.status}
                    </span>
                  </td>

                  <td className="py-3 px-3">
                    <select
                      value={a.technician || ""}
                      onChange={(e) =>
                        alert(
                          `ƒê√£ ph√¢n c√¥ng ${e.target.value} cho xe ${a.vin} (${a.campaignId})`
                        )
                      }
                      className="border border-gray-300 rounded-md p-1 outline-none focus:ring-1 focus:ring-green-500"
                    >
                      <option value="">Ph√¢n c√¥ng</option>
                      {technicians.map((t) => (
                        <option key={t} value={t}>
                          {t}
                        </option>
                      ))}
                    </select>
                  </td>

                  <td className="py-3 px-3 text-center">
                    {a.status === "Ho√†n th√†nh" ? (
                      <span className="text-gray-500 text-sm italic">
                        ƒê√£ b√°o c√°o
                      </span>
                    ) : (
                      <button className="px-3 py-1 bg-green-600 hover:bg-green-700 text-white text-xs rounded-lg">
                        Ho√†n th√†nh
                      </button>
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      <Backdrop
        isOpen={isOpen && modalType === "createAppointment"}
        onClose={() => dispatch(closeModal())}
      />
      {isOpen && modalType === "createAppointment" && (
        <Modal isOpen={true}>
          <div className="w-[500px] bg-white rounded-lg p-3 shadow-md space-y-5">
            {/* Header */}
            <div className="flex justify-between items-center">
              <Title
                title="T·∫°o l·ªãch h·∫πn"
                subTitle={`Chi·∫øn d·ªãch: ${modalData.title || "Kh√¥ng x√°c ƒë·ªãnh"}`}
              />
              <button
                className="w-8 h-8 flex justify-center items-center text-xl border text-green-500 hover:text-red-500 border-green-500 hover:border-red-500 p-2 rounded-full bg-green-100 hover:bg-red-100 cursor-pointer"
                onClick={() => dispatch(closeModal())}
              >
                ‚úï
              </button>
            </div>

            {/* Form */}
            <form onSubmit={handleSubmit} className="space-y-4">
              {/* Ch·ªçn xe */}
              <div>
                <div className="flex justify-between items-center mb-1">
                  <label className="block text-gray-700 text-sm font-medium">
                    Ch·ªçn xe
                  </label>
                </div>

                <select
                  name="vins"
                  multiple
                  value={form.vins}
                  onChange={(e) => {
                    const selected = Array.from(
                      e.target.selectedOptions,
                      (o) => o.value
                    );
                    setForm((prev) => ({ ...prev, vins: selected }));
                  }}
                  className="w-full border border-gray-300 rounded-lg p-2 h-32 focus:ring-2 focus:ring-green-500 outline-none"
                >
                  {modalData.affectedVehicles.map((v) => (
                    <option key={v.vin} value={v.vin}>
                      {v.vin} - {modalData.model}
                    </option>
                  ))}
                </select>

                <div className="flex justify-between items-center">
                  <p className="text-sm text-gray-500 mt-1">
                    {form.vins?.length || 0} xe ƒë∆∞·ª£c ch·ªçn
                  </p>
                  <div className="flex gap-2 text-xs">
                    <button
                      type="button"
                      onClick={() =>
                        setForm((prev) => ({
                          ...prev,
                          vins: modalData.affectedVehicles.map((v) => v.vin),
                        }))
                      }
                      className="text-green-600  font-medium cursor-pointer"
                    >
                      Ch·ªçn t·∫•t c·∫£
                    </button>
                    <button
                      type="button"
                      onClick={() => setForm((prev) => ({ ...prev, vins: [] }))}
                      className="text-red-500  font-medium cursor-pointer"
                    >
                      B·ªè ch·ªçn t·∫•t c·∫£
                    </button>
                  </div>
                </div>
              </div>

              {/* Ch·ªçn ng√†y & gi·ªù */}
              <div>
                <label className="block text-gray-700 text-sm font-medium mb-1">
                  Ng√†y v√† gi·ªù h·∫πn
                </label>
                <input
                  type="datetime-local"
                  name="date"
                  value={form.date}
                  onChange={handleChange}
                  className="w-full border border-gray-300 rounded-lg p-2 focus:ring-2 focus:ring-green-500 outline-none"
                />
              </div>

              {/* Ghi ch√∫ */}
              <div>
                <label className="block text-gray-700 text-sm font-medium mb-1">
                  Ghi ch√∫
                </label>
                <textarea
                  name="note"
                  value={form.note}
                  onChange={handleChange}
                  placeholder="Ghi ch√∫ ƒë·∫∑c bi·ªát..."
                  className="w-full border border-gray-300 rounded-lg p-2 focus:ring-2 focus:ring-green-500 outline-none"
                  rows="3"
                />
              </div>

              {/* Buttons */}
              <div className="flex justify-end gap-3 pt-2">
                <button
                  type="button"
                  onClick={() => dispatch(closeModal())}
                  className="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-200 cursor-pointer"
                >
                  H·ªßy
                </button>
                <button
                  type="submit"
                  className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 cursor-pointer"
                >
                  T·∫°o l·ªãch h·∫πn
                </button>
              </div>
            </form>
          </div>
        </Modal>
      )}
    </div>
  );
};

export default ManageCampaign;
